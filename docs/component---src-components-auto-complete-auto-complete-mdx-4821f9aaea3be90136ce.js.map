{"version":3,"sources":["webpack:///../src/components/AutoComplete/AutoComplete.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","of","AutoComplete","__position","__code","__scope","Playground","Props","estados","sigla","nome","variant","onSearch","query","filter","estado","includes","onChange","e","newValue","console","log","renderOption","isMDXComponent"],"mappings":"+QAUaA,G,UAAe,S,8NAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,0BAAS,6BAAGC,WAAW,KAAQ,CAC3B,KAAQ,qDADH,gBAAT,gFAGA,iBAAQ,CACN,GAAM,gBADR,gBAGA,YAAC,IAAD,CAAOC,GAAIC,IAAcH,QAAQ,UACjC,iBAAQ,CACN,GAAM,cADR,cAGA,YAAC,IAAD,CAAYI,WAAY,EAAGC,OAAQ,0tBAAuuBC,SAAO,GAC/wBP,QACAH,kBACAW,eACAC,UACAL,kBAL+wB,gBAM/wBP,IAN+wB,EAO/wBH,eAP+wB,GAQ9wBO,QAAQ,eACZ,WACK,IAAMS,EAAU,CAAC,CACfC,MAAO,KACPC,KAAM,gBACL,CACDD,MAAO,KACPC,KAAM,kBACL,CACDD,MAAO,KACPC,KAAM,cAmBR,OAAO,YAAC,IAAD,CAAcC,QAAQ,YAAYC,SAhBpB,SAAAC,GACnB,OAAIA,EACKL,EAAQM,QAAO,SAAAC,GAAM,OAAIA,EAAOL,KAAKM,SAASH,MAGhDL,GAWwDS,SAR5C,SAACC,EAAGC,GACvBC,QAAQC,IAAIF,IAO2EG,aAJpE,SAAAP,GACnB,OAAUA,EAAON,MAAjB,MAA4BM,EAAOL,MAGgFX,QAAQ,0B,4NAOrIH,EAAW2B,gBAAiB","file":"component---src-components-auto-complete-auto-complete-mdx-4821f9aaea3be90136ce.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/raphael/Documents/NodeProjects/ReactJs/mio-library-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport AutoComplete from './index.tsx';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"autocomplete\"\n    }}>{`AutoComplete`}</h1>\n    <p>{`O `}<a parentName=\"p\" {...{\n        \"href\": \"https://material-ui.com/components/autocomplete/\"\n      }}>{`autocomplete`}</a>{` é uma entrada de texto normal aprimorada por um painel de opções sugeridas.`}</p>\n    <h2 {...{\n      \"id\": \"propriedades\"\n    }}>{`Propriedades`}</h2>\n    <Props of={AutoComplete} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"uso-básico\"\n    }}>{`Uso básico`}</h2>\n    <Playground __position={1} __code={'() => {\\n  const estados = [\\n    {\\n      sigla: \\'MG\\',\\n      nome: \\'Minas Gerais\\',\\n    },\\n    {\\n      sigla: \\'RJ\\',\\n      nome: \\'Rio de Janeiro\\',\\n    },\\n    {\\n      sigla: \\'SP\\',\\n      nome: \\'São Paulo\\',\\n    },\\n  ]\\n  const handleSearch = query => {\\n    if (query) {\\n      return estados.filter(estado => estado.nome.includes(query))\\n    }\\n    return estados\\n  }\\n  const handleChange = (e, newValue) => {\\n    console.log(newValue)\\n  }\\n  const renderOption = estado => {\\n    return `${estado.sigla} - ${estado.nome}`\\n  }\\n  return (\\n    <AutoComplete\\n      variant=\\\"contained\\\"\\n      onSearch={handleSearch}\\n      onChange={handleChange}\\n      renderOption={renderOption}\\n    ></AutoComplete>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      AutoComplete,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const estados = [{\n          sigla: 'MG',\n          nome: 'Minas Gerais'\n        }, {\n          sigla: 'RJ',\n          nome: 'Rio de Janeiro'\n        }, {\n          sigla: 'SP',\n          nome: 'São Paulo'\n        }];\n\n        const handleSearch = query => {\n          if (query) {\n            return estados.filter(estado => estado.nome.includes(query));\n          }\n\n          return estados;\n        };\n\n        const handleChange = (e, newValue) => {\n          console.log(newValue);\n        };\n\n        const renderOption = estado => {\n          return `${estado.sigla} - ${estado.nome}`;\n        };\n\n        return <AutoComplete variant=\"contained\" onSearch={handleSearch} onChange={handleChange} renderOption={renderOption} mdxType=\"AutoComplete\"></AutoComplete>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}